/*
 * Copyright (C) 2022 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.android.navigation.inertial.calibration.intervals.measurements

import android.content.Context
import com.irurueta.android.navigation.inertial.calibration.intervals.ErrorReason
import com.irurueta.android.navigation.inertial.calibration.intervals.Status
import com.irurueta.android.navigation.inertial.collectors.AccelerometerSensorCollector
import com.irurueta.android.navigation.inertial.collectors.AccelerometerSensorCollector.SensorType
import com.irurueta.android.navigation.inertial.collectors.SensorAccuracy
import com.irurueta.android.navigation.inertial.collectors.SensorCollector
import com.irurueta.android.navigation.inertial.collectors.SensorDelay
import com.irurueta.navigation.inertial.calibration.TimeIntervalEstimator
import com.irurueta.navigation.inertial.calibration.generators.MeasurementsGenerator
import com.irurueta.navigation.inertial.calibration.generators.MeasurementsGeneratorListener
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector
import com.irurueta.units.Acceleration
import com.irurueta.units.Time
import com.irurueta.units.TimeConverter

/**
 * Base class to generate measurements that can later be used by calibrators.
 * Measurements are generated by taking into account static and dynamic intervals on the device,
 * where the device is kept static (e.g. motionless), or where some force is applied to the device
 * changing its position or orientation.
 *
 * @param C type of [CalibrationMeasurementGenerator]
 * @param T type of measurement to be generated.
 * @param G type of internal generator.
 * @param L type of listener.
 * @param I type of input data to be processed.
 */
abstract class CalibrationMeasurementGenerator<C : CalibrationMeasurementGenerator<C, T, G, L, I>,
        T, G : MeasurementsGenerator<T, G, L, I>, L : MeasurementsGeneratorListener<T, G, L, I>,
        I>(
    val context: Context,
    val accelerometerSensorType: SensorType = SensorType.ACCELEROMETER,
    val accelerometerSensorDelay: SensorDelay = SensorDelay.FASTEST,
    var initializationStartedListener: OnInitializationStartedListener<C>? = null,
    var initializationCompletedListener: OnInitializationCompletedListener<C>? = null,
    var errorListener: OnErrorListener<C>? = null,
    var staticIntervalDetectedListener: OnStaticIntervalDetectedListener<C>? = null,
    var dynamicIntervalDetectedListener: OnDynamicIntervalDetectedListener<C>? = null,
    var staticIntervalSkippedListener: OnStaticIntervalSkippedListener<C>? = null,
    var dynamicIntervalSkippedListener: OnDynamicIntervalSkippedListener<C>? = null,
    var generatedMeasurementListener: OnGeneratedMeasurementListener<C, T>? = null,
    var resetListener: OnResetListener<C>? = null,
    var accelerometerMeasurementListener: AccelerometerSensorCollector.OnMeasurementListener? = null,
    var accuracyChangedListener: SensorCollector.OnAccuracyChangedListener? = null
) {
    /**
     * Listener for internal measurement generator.
     */
    protected abstract val measurementsGeneratorListener: L

    /**
     * Internal measurements generator for calibration.
     */
    protected abstract val measurementsGenerator: G

    /**
     * Processes an accelerometer measurement to generate an instance of type [I] to be used
     * by the internal measurement generator.
     * This method is meant to be used by implementations of this class to combine accelerometer
     * sample along with other sensors (i.e. gyroscope).
     *
     * @param ax acceleration on device x-axis expressed in meters per squared second (m/s^2).
     * @param ay acceleration on device y-axis expressed in meters per squared second (m/s^2).
     * @param az acceleration on device z-axis expressed in meters per squared second (m/s^2).
     * @param bx bias on device x-axis expressed in meters per squared second (m/s^2). Only
     * available when using [SensorType.ACCELEROMETER_UNCALIBRATED]. If available, this value
     * remains constant with calibrated bias value.
     * @param by bias on device y-axis expressed in meters per squared second (m/s^2). Only
     * available when using [SensorType.ACCELEROMETER_UNCALIBRATED]. If available, this value
     * remains constant with calibrated bias value.
     * @param bz bias on device z-axis expressed in meters per squared second (m/s^2). Only
     * available when using [SensorType.ACCELEROMETER_UNCALIBRATED]. If available, this value
     * remains constant with calibrated bias value.
     * @param accelerometerTimestamp time in nanoseconds at which the measurement was made. Each
     * measurement will be monotonically increasing using the same time base as
     * [android.os.SystemClock.elapsedRealtimeNanos].
     * @param accelerometerTimestamp accelerometer sensor accuracy.
     * @param diffSeconds elapsed seconds since accelerometer started.
     * @param result instance where processed sample result will be stored.
     */
    protected abstract fun processSample(
        ax: Float,
        ay: Float,
        az: Float,
        bx: Float?,
        by: Float?,
        bz: Float?,
        accelerometerTimestamp: Long,
        accelerometerAccuracy: SensorAccuracy?,
        diffSeconds: Double,
        result: I
    )

    /**
     * Sample used by internal measurement generator which combines information from accelerometer
     * and possibly other sensors.
     */
    protected abstract val sample: I

    /**
     * Internal listener for accelerometer sensor collector.
     * Handles measurements collected by the accelerometer sensor so that they are processed by
     * the internal measurement generator.
     */
    private val accelerometerCollectorMeasurementListener =
        AccelerometerSensorCollector.OnMeasurementListener { ax, ay, az, bx, by, bz, timestamp, accuracy ->
            val status = status
            var diffSeconds = 0.0
            if (status == Status.INITIALIZING) {
                // during initialization phase, also estimate time interval duration.
                if (numberOfProcessedAccelerometerMeasurements > 0) {
                    val diff = timestamp - initialAccelerometerTimestamp
                    diffSeconds = TimeConverter.nanosecondToSecond(diff.toDouble())
                    accelerometerTimeIntervalEstimator.addTimestamp(diffSeconds)
                } else {
                    initialAccelerometerTimestamp = timestamp
                }
            }

            processSample(ax, ay, az, bx, by, bz, timestamp, accuracy, diffSeconds, sample)
            measurementsGenerator.process(sample)
            numberOfProcessedAccelerometerMeasurements++

            if (status == Status.INITIALIZATION_COMPLETED) {
                // once initialized, set time interval into internal detector
                measurementsGenerator.timeInterval =
                    accelerometerTimeIntervalEstimator.averageTimeInterval
                initialized = true
            }

            accelerometerMeasurementListener?.onMeasurement(
                ax,
                ay,
                az,
                bx,
                by,
                bz,
                timestamp,
                accuracy
            )
        }

    /**
     * Listener to detect when accuracy of sensor changes.
     * When sensor becomes unreliable, an error is notified.
     */
    @Suppress("UNCHECKED_CAST")
    protected val collectorAccuracyChangedListener =
        SensorCollector.OnAccuracyChangedListener { accuracy ->
            if (accuracy == SensorAccuracy.UNRELIABLE) {
                stop()
                unreliable = true
                errorListener?.onError(
                    this@CalibrationMeasurementGenerator as C,
                    ErrorReason.UNRELIABLE_SENSOR
                )
            }

            accuracyChangedListener?.onAccuracyChanged(accuracy)
        }

    /**
     * Accelerometer sensor collector.
     * Collects accelerometer measurements.
     */
    private val accelerometerCollector = AccelerometerSensorCollector(
        context,
        accelerometerSensorType,
        accelerometerSensorDelay,
        accelerometerCollectorMeasurementListener,
        collectorAccuracyChangedListener
    )

    /**
     * Internal time estimator for accelerometer samples used for static/dynamic interval detection.
     * This is used to estimate statistics about time intervals of accelerometer measurements.
     */
    protected val accelerometerTimeIntervalEstimator = TimeIntervalEstimator()

    /**
     * Timestamp when accelerometer started.
     */
    private var initialAccelerometerTimestamp: Long = 0L

    /**
     * Indicates whether generator successfully completed initialization.
     */
    protected var initialized: Boolean = false

    /**
     * Indicates whether a sensor has become unreliable, and thus
     * the interval detector is considered to be in [Status.FAILED].
     */
    private var unreliable = false

    /**
     * Gets accelerometer sensor being used to obtain measurements and detect static/dynamic
     * intervals, or null if not available.
     * This can be used to obtain additional information about the sensor.
     */
    val accelerometerSensor
        get() = accelerometerCollector.sensor

    /**
     * Gets or sets minimum number of samples required in a static interval to be taken into
     * account. Smaller static intervals will be discarded.
     *
     * @throws IllegalArgumentException if provided value is less than 2.
     * @throws IllegalStateException if generator is currently running.
     */
    var minStaticSamples
        get() = measurementsGenerator.minStaticSamples
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.minStaticSamples = value
        }

    /**
     * Gets or sets maximum number of samples allowed in dynamic intervals.
     * Dynamic intervals exceeding this value are discarded.
     *
     * @throws IllegalArgumentException if provided value is less than 2.
     * @throws IllegalStateException if generator is currently running.
     */
    var maxDynamicSamples
        get() = measurementsGenerator.maxDynamicSamples
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.maxDynamicSamples = value
        }

    /**
     * Gets or sets length of number of samples to keep within the window being processed to
     * determine instantaneous sensor noise level. Window size must always be larger than
     * allowed minimum value, which is 2 and must have an odd value.
     *
     * @throws IllegalArgumentException if provided value is not valid.
     * @throws IllegalStateException if generator is currently running.
     */
    var windowSize
        get() = measurementsGenerator.windowSize
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.windowSize = value
        }

    /**
     * Gets or sets number of samples to be processed initially while keeping the sensor static in
     * order to find the base noise level when device is static.
     *
     * @throws IllegalArgumentException if provided value is less than
     * [TriadStaticIntervalDetector.MINIMUM_INITIAL_STATIC_SAMPLES].
     * @throws IllegalStateException if generator is currently running.
     */
    var initialStaticSamples
        get() = measurementsGenerator.initialStaticSamples
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.initialStaticSamples = value
        }

    /**
     * Gets or sets factor to be applied to detected base noise level in order to determine
     * threshold for static/dynamic period changes. This factor is unit-less.
     *
     * @throws IllegalArgumentException if provided value is zero or negative
     * @throws IllegalStateException if generator is currently running.
     */
    var thresholdFactor
        get() = measurementsGenerator.thresholdFactor
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.thresholdFactor = value
        }

    /**
     * Gets or sets factor to determine that a sudden movement has occurred during initialization if
     * instantaneous noise level exceeds accumulated noise level by this factor amount. This factor
     * is unit-less.
     *
     * @throws IllegalArgumentException if provided value is zero or negative.
     * @throws IllegalStateException if generator is currently running
     */
    var instantaneousNoiseLevelFactor
        get() = measurementsGenerator.instantaneousNoiseLevelFactor
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.instantaneousNoiseLevelFactor = value
        }

    /**
     * Gets or sets overall absolute threshold to determine whether there has been excessive motion
     * during the whole initialization phase. Failure will be detected if estimated base noise level
     * exceeds this threshold when initialization completes. This threshold is expressed in meters
     * per squared second (m/s^2).
     *
     * @throws IllegalArgumentException if provided value is zero or negative.
     * @throws IllegalStateException if detector is currently running.
     */
    var baseNoiseLevelAbsoluteThreshold
        get() = measurementsGenerator.baseNoiseLevelAbsoluteThreshold
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.baseNoiseLevelAbsoluteThreshold = value
        }

    /**
     * Gets or sets overall absolute threshold to determine whether there has been excessive motion
     * during the whole initialization phase. Failure will be detected if estimated base noise level
     * exceeds this threshold when initialization completes.
     *
     * @throws IllegalArgumentException if provided value is zero or negative.
     * @throws IllegalStateException if detector is currently running.
     */
    var baseNoiseLevelAbsoluteThresholdAsMeasurement: Acceleration
        get() = measurementsGenerator.baseNoiseLevelAbsoluteThresholdAsMeasurement
        @Throws(IllegalArgumentException::class, IllegalStateException::class)
        set(value) {
            check(!running)
            measurementsGenerator.setBaseNoiseLevelAbsoluteThreshold(value)
        }

    /**
     * Gets overall absolute threshold to determine whether there has been excessive motion during
     * the whole initialization phase. Failure will be detected if estimated base noise level
     * exceeds this threshold when initialization completes.
     *
     * @param result instance where result will be stored.
     */
    fun getBaseNoiseLevelAbsoluteThresholdAsMeasurement(result: Acceleration) {
        measurementsGenerator.getBaseNoiseLevelAbsoluteThresholdAsMeasurement(result)
    }

    /**
     * Gets accelerometer measurement base noise level that has been detected during initialization
     * expressed in meters per squared second (m/s^2).
     * This is only available once detector completes initialization.
     */
    val accelerometerBaseNoiseLevel
        get() = if (initialized) {
            measurementsGenerator.accelerometerBaseNoiseLevel
        } else {
            null
        }

    /**
     * Gets sensor measurement base noise level that has been detected during initialization.
     * This is only available once detector completes initialization.
     */
    val accelerometerBaseNoiseLevelAsMeasurement
        get() = if (initialized) {
            measurementsGenerator.accelerometerBaseNoiseLevelAsMeasurement
        } else {
            null
        }

    /**
     * Gets sensor measurement base noise level that has been detected during initialization.
     * This is only available once detector completes initialization.
     *
     * @param result instance where result will be stored.
     * @return true if result is available, false otherwise.
     */
    fun getAccelerometerBaseNoiseLevelAsMeasurement(result: Acceleration): Boolean {
        return if (initialized) {
            measurementsGenerator.getAccelerometerBaseNoiseLevelAsMeasurement(result)
            true
        } else {
            false
        }
    }

    /**
     * Gets measurement base noise level PSD (Power Spectral Density) expressed in (m^2 * s^-3).
     */
    val accelerometerBaseNoiseLevelPsd
        get() = if (initialized) {
            measurementsGenerator.accelerometerBaseNoiseLevelPsd
        } else {
            null
        }

    /**
     * Gets measurement base noise level root PSD (Power Spectral Density) expressed
     * in (m * s^-1.5).
     * This is only available once detector completes initialization.
     */
    val accelerometerBaseNoiseLevelRootPsd
        get() = if (initialized) {
            measurementsGenerator.accelerometerBaseNoiseLevelRootPsd
        } else {
            null
        }

    /**
     * Gets estimated threshold to determine static/dynamic period changes expressed in meters per
     * squared second (m/s^2).
     * This is only available once detector completes initialization.
     */
    val threshold
        get() = if (initialized) {
            measurementsGenerator.threshold
        } else {
            null
        }

    /**
     * Gets estimated threshold to determine static/dynamic period changes.
     * This is only available once detector completes initialization.
     */
    val thresholdAsMeasurement
        get() = if (initialized) {
            measurementsGenerator.thresholdAsMeasurement
        } else {
            null
        }

    /**
     * Gets estimated threshold to determine static/dynamic period changes.
     * This is only available once detector completes initialization.
     *
     * @param result instance where result will be stored.
     * @return true if result is available, false otherwise.
     */
    fun getThresholdAsMeasurement(result: Acceleration): Boolean {
        return if (initialized) {
            measurementsGenerator.getThresholdAsMeasurement(result)
            true
        } else {
            false
        }
    }

    /**
     * Gets number of samples that have been processed in a static period so far.
     */
    val processedStaticSamples
        get() = measurementsGenerator.processedStaticSamples

    /**
     * Gets number of samples that have been processed in a dynamic period so far.
     */
    val processedDynamicSamples
        get() = measurementsGenerator.processedDynamicSamples

    /**
     * Indicates whether last static interval must be skipped.
     */
    val isStaticIntervalSkipped
        get() = measurementsGenerator.isStaticIntervalSkipped

    /**
     * Indicates whether last dynamic interval must be skipped.
     */
    val isDynamicIntervalSkipped
        get() = measurementsGenerator.isDynamicIntervalSkipped

    /**
     * Gets average time interval between accelerometer samples expressed in seconds (s).
     * This is only available once this generator completes initialization.
     */
    val accelerometerAverageTimeInterval
        get() = if (initialized) {
            accelerometerTimeIntervalEstimator.averageTimeInterval
        } else {
            null
        }

    /**
     * Gets average time interval between accelerometer samples.
     * This is only available once this generator completes initialization.
     */
    val accelerometerAverageTimeIntervalAsTime
        get() = if (initialized) {
            accelerometerTimeIntervalEstimator.averageTimeIntervalAsTime
        } else {
            null
        }

    /**
     * Gets average time interval between accelerometer measurements.
     * This is only available once detector completes initialization.
     *
     * @param result instance where result will be stored.
     * @return true if result is available, false otherwise.
     */
    fun getAccelerometerAverageTimeIntervalAsTime(result: Time): Boolean {
        return if (initialized) {
            accelerometerTimeIntervalEstimator.getAverageTimeIntervalAsTime(result)
            true
        } else {
            false
        }
    }

    /**
     * Gets estimated variance of time interval between accelerometer measurements expressed in
     * squared seconds (s^2).
     * This is only available once detector completes initialization.
     */
    val accelerometerTimeIntervalVariance
        get() = if (initialized) {
            accelerometerTimeIntervalEstimator.timeIntervalVariance
        } else {
            null
        }

    /**
     * Gets estimated standard deviation of time interval between accelerometer measurements
     * expressed in seconds (s).
     * This is only available once detector completes initialization.
     */
    val accelerometerTimeIntervalStandardDeviation
        get() = if (initialized) {
            accelerometerTimeIntervalEstimator.timeIntervalStandardDeviation
        } else {
            null
        }

    /**
     * Gets estimated standard deviation of time interval between accelerometer measurements.
     * This is only available once detector completes initialization.
     */
    val accelerometerTimeIntervalStandardDeviationAsTime
        get() = if (initialized) {
            accelerometerTimeIntervalEstimator.timeIntervalStandardDeviationAsTime
        } else {
            null
        }

    /**
     * Gets estimated standard deviation of time interval between accelerometer measurements.
     * This is only available once detector completes initialization.
     *
     * @param result instance where result will be stored.
     * @return true if result is available, false otherwise.
     */
    fun getTimeIntervalStandardDeviationAsTime(result: Time): Boolean {
        return if (initialized) {
            accelerometerTimeIntervalEstimator.getTimeIntervalStandardDeviationAsTime(result)
            true
        } else {
            false
        }
    }

    /**
     * Number of accelerometer measurements that have been processed.
     */
    var numberOfProcessedAccelerometerMeasurements: Int = 0
        protected set

    /**
     * Indicates whether this generator is already running.
     */
    var running = false
        private set

    /**
     * Gets status of measurement generator.
     * Initially the generator will be idle.
     * Once it starts, it will start the initialization phase, and once
     * initialization is complete, it will switch between static or dynamic interval
     * until generator is stopped or an error occurs.
     */
    val status: Status
        get() = Status.mapStatus(measurementsGenerator.status, unreliable)

    /**
     * Starts collection of sensor measurements.
     *
     * @throws IllegalStateException if generator is already running or sensor is not available.
     */
    @Throws(IllegalStateException::class)
    open fun start() {
        check(!running)

        reset()

        running = true
        if (!accelerometerCollector.start()) {
            running = false
            throw IllegalStateException("Unavailable accelerometer sensor")
        }
    }

    /**
     * Stops collection of sensor measurements.
     */
    open fun stop() {
        accelerometerCollector.stop()
        running = false
    }

    /**
     * Resets generator to its initial state.
     */
    private fun reset() {
        accelerometerTimeIntervalEstimator.totalSamples = Integer.MAX_VALUE
        accelerometerTimeIntervalEstimator.reset()
        measurementsGenerator.reset()
        unreliable = false
        initialAccelerometerTimestamp = 0L
        numberOfProcessedAccelerometerMeasurements = 0
        initialized = false
    }

    /**
     * Maps error reason to an [ErrorReason]
     *
     * @param reason reason to map from.
     * @return mapped reason.
     */
    protected fun mapErrorReason(reason: TriadStaticIntervalDetector.ErrorReason): ErrorReason {
        return ErrorReason.mapErrorReason(reason, unreliable)
    }

    /**
     * Interface to notify when generator starts initialization.
     *
     * @param C an implementation of [CalibrationMeasurementGenerator].
     */
    fun interface OnInitializationStartedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {

        /**
         * Called when initial static period starts so that base noise level starts being estimated.
         *
         * @param generator generator that raised the event.
         */
        fun onInitializationStarted(generator: C)
    }

    /**
     * Interface to notify when generator completes its initialization.
     *
     * @param C an implementation of [CalibrationMeasurementGenerator]
     */
    fun interface OnInitializationCompletedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when initial static period successfully completes and accelerometer base noise
         * level is estimated so that static and dynamic periods can be detected.
         *
         * @param generator generator that raised the event.
         * @param baseNoiseLevel base measurement noise level expressed in meters per squared second
         * (m/s^2).
         */
        fun onInitializationCompleted(generator: C, baseNoiseLevel: Double)
    }

    /**
     * Interface to notify when an error occurs.
     *
     * @param C an implementation of [CalibrationMeasurementGenerator]
     */
    fun interface OnErrorListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when an error is detected, either at initialization because excessive changes in
         * sensor measurements are found, or because sensor becomes unreliable.
         * When an error occurs, generator is stopped and needs to be restarted to be used again.
         *
         * @param generator generator that raised the event.
         * @param reason reason why error was detected.
         */
        fun onError(generator: C, reason: ErrorReason)
    }

    /**
     * Interface to notify a new static interval is detected.
     *
     * @param C an implementation of [CalibrationMeasurementGenerator]
     */
    fun interface OnStaticIntervalDetectedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when a static interval has been detected after initialization.
         *
         * @param generator generator that raised the event.
         */
        fun onStaticIntervalDetected(generator: C)
    }

    /**
     * Interface to notify when a dynamic interval is detected.
     */
    fun interface OnDynamicIntervalDetectedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when a dynamic interval has been detected after initialization.
         *
         * @param generator generator that raised the event.
         */
        fun onDynamicIntervalDetected(generator: C)
    }

    /**
     * Interface to notify when a static interval is skipped.
     * This happens when interval is too short.
     */
    fun interface OnStaticIntervalSkippedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when a detected static interval is skipped because there are not enough samples to
         * be processed.
         *
         * @param generator generator that raised the event.
         */
        fun onStaticIntervalSkipped(generator: C)
    }

    /**
     * Interface to notify when a dynamic interval is skipped.
     * This happens when interval is too long.
     */
    fun interface OnDynamicIntervalSkippedListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when a detected dynamic interval is skipped because it has too many samples in it.
         *
         * @param generator generator that raised the event.
         */
        fun onDynamicIntervalSkipped(generator: C)
    }

    /**
     * Interface to notify when a new calibration measurement is generated.
     */
    fun interface OnGeneratedMeasurementListener<C : CalibrationMeasurementGenerator<C, T, *, *, *>, T> {
        /**
         * Called when a new calibration measurement is generated.
         *
         * @param generator generator that raised the event.
         * @param measurement generated calibration measurement.
         */
        fun onGeneratedMeasurement(generator: C, measurement: T)
    }

    /**
     * Interface to notify when generator is reset (occurs when starting after stopping the
     * generator)
     */
    fun interface OnResetListener<C : CalibrationMeasurementGenerator<C, *, *, *, *>> {
        /**
         * Called when generator is reset.
         *
         * @param generator generator that raised the event.
         */
        fun onReset(generator: C)
    }
}