/*
 * Copyright (C) 2022 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.android.navigation.inertial.calibration.intervals.measurements

import android.content.Context
import com.irurueta.android.navigation.inertial.ENUtoNEDTriadConverter
import com.irurueta.android.navigation.inertial.collectors.AccelerometerSensorCollector
import com.irurueta.android.navigation.inertial.collectors.AccelerometerSensorType
import com.irurueta.android.navigation.inertial.collectors.SensorCollector
import com.irurueta.android.navigation.inertial.collectors.SensorDelay
import com.irurueta.navigation.inertial.BodyKinematics
import com.irurueta.navigation.inertial.calibration.AccelerationTriad
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyKinematics
import com.irurueta.navigation.inertial.calibration.generators.AccelerometerMeasurementsGenerator
import com.irurueta.navigation.inertial.calibration.generators.AccelerometerMeasurementsGeneratorListener
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector

/**
 * Generates measurements that can later be used by accelerometer calibrators.
 * Measurements are generated by taking into account static and dynamic intervals on the device,
 * when the device is kept static (e.g. motionless), or when some force is applied to the device
 * changing its position or orientation.
 * Measurement generator converts device ENU measurements into measurements expressed in local
 * tangent plane NED coordinates.
 *
 * @property context Android context.
 * @property accelerometerSensorType One of the supported accelerometer sensor types.
 * @property accelerometerSensorDelay Delay of sensor between samples.
 * @property initializationStartedListener listener to notify when initialization starts.
 * @property initializationCompletedListener listener to notify when initialization successfully
 * completes.
 * @property errorListener listener to notify errors.
 * @property staticIntervalDetectedListener listener to notify when a static interval is detected.
 * @property dynamicIntervalDetectedListener listener to notify when a dynamic interval is detected.
 * @property staticIntervalSkippedListener listener to notify when a static interval is skipped if
 * its duration is too short.
 * @property dynamicIntervalSkippedListener listener to notify when a dynamic interval is skipped if
 * its duration is too long.
 * @property generatedMeasurementListener listener to notify when a new calibration measurement is
 * generated.
 * @property resetListener listener to notify when generator is restarted.
 * @property accelerometerMeasurementListener listener to notify when a new accelerometer
 * measurement is received.
 * @property accuracyChangedListener listener to notify when sensor accuracy changes.
 */
class AccelerometerMeasurementGenerator(
    context: Context,
    accelerometerSensorType: AccelerometerSensorType =
        AccelerometerSensorType.ACCELEROMETER_UNCALIBRATED,
    accelerometerSensorDelay: SensorDelay = SensorDelay.FASTEST,
    initializationStartedListener: OnInitializationStartedListener<AccelerometerMeasurementGenerator>? = null,
    initializationCompletedListener: OnInitializationCompletedListener<AccelerometerMeasurementGenerator>? = null,
    errorListener: OnErrorListener<AccelerometerMeasurementGenerator>? = null,
    staticIntervalDetectedListener: OnStaticIntervalDetectedListener<AccelerometerMeasurementGenerator>? = null,
    dynamicIntervalDetectedListener: OnDynamicIntervalDetectedListener<AccelerometerMeasurementGenerator>? = null,
    staticIntervalSkippedListener: OnStaticIntervalSkippedListener<AccelerometerMeasurementGenerator>? = null,
    dynamicIntervalSkippedListener: OnDynamicIntervalSkippedListener<AccelerometerMeasurementGenerator>? = null,
    generatedMeasurementListener: OnGeneratedMeasurementListener<AccelerometerMeasurementGenerator, StandardDeviationBodyKinematics>? = null,
    resetListener: OnResetListener<AccelerometerMeasurementGenerator>? = null,
    accelerometerMeasurementListener: AccelerometerSensorCollector.OnMeasurementListener? = null,
    accuracyChangedListener: SensorCollector.OnAccuracyChangedListener? = null
) : SingleSensorCalibrationMeasurementGenerator<
        AccelerometerMeasurementGenerator, StandardDeviationBodyKinematics,
        AccelerometerMeasurementsGenerator, AccelerometerMeasurementsGeneratorListener,
        BodyKinematics>(
    context,
    accelerometerSensorType,
    accelerometerSensorDelay,
    initializationStartedListener,
    initializationCompletedListener,
    errorListener,
    staticIntervalDetectedListener,
    dynamicIntervalDetectedListener,
    staticIntervalSkippedListener,
    dynamicIntervalSkippedListener,
    generatedMeasurementListener,
    resetListener,
    accelerometerMeasurementListener,
    accuracyChangedListener
) {
    /**
     * Triad containing acceleration samples converted from device ENU coordinates to local plane
     * NED coordinates.
     * This is reused for performance reasons.
     */
    private val acceleration = AccelerationTriad()

    /**
     * Listener for internal measurement generator.
     */
    override val measurementsGeneratorListener =
        object : AccelerometerMeasurementsGeneratorListener {
            override fun onInitializationStarted(generator: AccelerometerMeasurementsGenerator?) {
                initializationStartedListener?.onInitializationStarted(
                    this@AccelerometerMeasurementGenerator
                )
            }

            override fun onInitializationCompleted(
                generator: AccelerometerMeasurementsGenerator?,
                baseNoiseLevel: Double
            ) {
                initializationCompletedListener?.onInitializationCompleted(
                    this@AccelerometerMeasurementGenerator,
                    baseNoiseLevel
                )
            }

            override fun onError(
                generator: AccelerometerMeasurementsGenerator?,
                reason: TriadStaticIntervalDetector.ErrorReason
            ) {
                errorListener?.onError(
                    this@AccelerometerMeasurementGenerator,
                    mapErrorReason(reason)
                )
            }

            override fun onStaticIntervalDetected(generator: AccelerometerMeasurementsGenerator?) {
                staticIntervalDetectedListener?.onStaticIntervalDetected(
                    this@AccelerometerMeasurementGenerator
                )
            }

            override fun onDynamicIntervalDetected(generator: AccelerometerMeasurementsGenerator?) {
                dynamicIntervalDetectedListener?.onDynamicIntervalDetected(
                    this@AccelerometerMeasurementGenerator
                )
            }

            override fun onStaticIntervalSkipped(generator: AccelerometerMeasurementsGenerator?) {
                staticIntervalSkippedListener?.onStaticIntervalSkipped(
                    this@AccelerometerMeasurementGenerator
                )
            }

            override fun onDynamicIntervalSkipped(generator: AccelerometerMeasurementsGenerator?) {
                dynamicIntervalSkippedListener?.onDynamicIntervalSkipped(
                    this@AccelerometerMeasurementGenerator
                )
            }

            override fun onGeneratedMeasurement(
                generator: AccelerometerMeasurementsGenerator?,
                measurement: StandardDeviationBodyKinematics
            ) {
                generatedMeasurementListener?.onGeneratedMeasurement(
                    this@AccelerometerMeasurementGenerator,
                    measurement
                )
            }

            override fun onReset(generator: AccelerometerMeasurementsGenerator?) {
                resetListener?.onReset(this@AccelerometerMeasurementGenerator)
            }
        }

    /**
     * Internal measurements generator for accelerometer calibration.
     */
    override val measurementsGenerator =
        AccelerometerMeasurementsGenerator(measurementsGeneratorListener)

    /**
     * Processes an accelerometer measurement to generate an instance of type [BodyKinematics] to be
     * used by the internal measurement generator.
     * Since [AccelerometerMeasurementsGenerator] only requires acceleration information, no data is
     * provided for angular rates in processed result.
     *
     * @param ax acceleration on device x-axis expressed in meters per squared second (m/s^2).
     * @param ay acceleration on device y-axis expressed in meters per squared second (m/s^2).
     * @param az acceleration on device z-axis expressed in meters per squared second (m/s^2).
     * @param diffSeconds elapsed seconds since accelerometer started.
     * @param result instance where processed sample result will be stored.
     */
    override fun processSample(
        ax: Float,
        ay: Float,
        az: Float,
        diffSeconds: Double,
        result: BodyKinematics
    ) {
        // convert from device ENU coordinates to local plane NED coordinates
        ENUtoNEDTriadConverter.convert(ax.toDouble(), ay.toDouble(), az.toDouble(), acceleration)

        // set accelerometer information
        result.fx = acceleration.valueX
        result.fy = acceleration.valueY
        result.fz = acceleration.valueZ
    }

    /**
     * Body kinematics used by internal measurement generator.
     * For accelerometer calibration purposes, only specific force is required.
     */
    override val sample = BodyKinematics()
}