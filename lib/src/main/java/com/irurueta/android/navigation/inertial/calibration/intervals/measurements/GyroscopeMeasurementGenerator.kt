/*
 * Copyright (C) 2022 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.android.navigation.inertial.calibration.intervals.measurements

import android.content.Context
import com.irurueta.android.navigation.inertial.collectors.*
import com.irurueta.navigation.inertial.BodyKinematics
import com.irurueta.navigation.inertial.calibration.BodyKinematicsSequence
import com.irurueta.navigation.inertial.calibration.StandardDeviationTimedBodyKinematics
import com.irurueta.navigation.inertial.calibration.TimedBodyKinematics
import com.irurueta.navigation.inertial.calibration.generators.GyroscopeMeasurementsGenerator
import com.irurueta.navigation.inertial.calibration.generators.GyroscopeMeasurementsGeneratorListener
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector

/**
 * Generates measurements that can later be used by gyroscope calibrators.
 * Measurements are generated by taking into account static and dynamic intervals on the device,
 * when the device is kept static (e.g. motionless), or when some force is applied to the device
 * changing its position or orientation.
 */
class GyroscopeMeasurementGenerator(
    context: Context,
    accelerometerSensorType: AccelerometerSensorCollector.SensorType =
        AccelerometerSensorCollector.SensorType.ACCELEROMETER,
    accelerometerSensorDelay: SensorDelay = SensorDelay.FASTEST,
    val gyroscopeSensorType: GyroscopeSensorCollector.SensorType =
        GyroscopeSensorCollector.SensorType.GYROSCOPE,
    val gyroscopeSensorDelay: SensorDelay = SensorDelay.FASTEST,
    initializationStartedListener: OnInitializationStartedListener<GyroscopeMeasurementGenerator>? = null,
    initializationCompletedListener: OnInitializationCompletedListener<GyroscopeMeasurementGenerator>? = null,
    errorListener: OnErrorListener<GyroscopeMeasurementGenerator>? = null,
    staticIntervalDetectedListener: OnStaticIntervalDetectedListener<GyroscopeMeasurementGenerator>? = null,
    dynamicIntervalDetectedListener: OnDynamicIntervalDetectedListener<GyroscopeMeasurementGenerator>? = null,
    staticIntervalSkippedListener: OnStaticIntervalSkippedListener<GyroscopeMeasurementGenerator>? = null,
    dynamicIntervalSkippedListener: OnDynamicIntervalSkippedListener<GyroscopeMeasurementGenerator>? = null,
    generatedMeasurementListener: OnGeneratedMeasurementListener<GyroscopeMeasurementGenerator, BodyKinematicsSequence<StandardDeviationTimedBodyKinematics>>? = null,
    resetListener: OnResetListener<GyroscopeMeasurementGenerator>? = null,
    accelerometerMeasurementListener: AccelerometerSensorCollector.OnMeasurementListener? = null,
    var gyroscopeMeasurementListener: GyroscopeSensorCollector.OnMeasurementListener? = null,
    accuracyChangedListener: SensorCollector.OnAccuracyChangedListener? = null
) : CalibrationMeasurementGenerator<GyroscopeMeasurementGenerator,
        BodyKinematicsSequence<StandardDeviationTimedBodyKinematics>,
        GyroscopeMeasurementsGenerator, GyroscopeMeasurementsGeneratorListener, TimedBodyKinematics>(
    context,
    accelerometerSensorType,
    accelerometerSensorDelay,
    initializationStartedListener,
    initializationCompletedListener,
    errorListener,
    staticIntervalDetectedListener,
    dynamicIntervalDetectedListener,
    staticIntervalSkippedListener,
    dynamicIntervalSkippedListener,
    generatedMeasurementListener,
    resetListener,
    accelerometerMeasurementListener,
    accuracyChangedListener
) {
    /**
     * Listener for internal measurement generator.
     */
    override val measurementsGeneratorListener = object : GyroscopeMeasurementsGeneratorListener {
        override fun onInitializationStarted(generator: GyroscopeMeasurementsGenerator?) {
            initializationStartedListener?.onInitializationStarted(
                this@GyroscopeMeasurementGenerator
            )
        }

        override fun onInitializationCompleted(
            generator: GyroscopeMeasurementsGenerator?,
            baseNoiseLevel: Double
        ) {
            initializationCompletedListener?.onInitializationCompleted(
                this@GyroscopeMeasurementGenerator,
                baseNoiseLevel
            )
        }

        override fun onError(
            generator: GyroscopeMeasurementsGenerator?,
            reason: TriadStaticIntervalDetector.ErrorReason
        ) {
            errorListener?.onError(this@GyroscopeMeasurementGenerator, mapErrorReason(reason))
        }

        override fun onStaticIntervalDetected(generator: GyroscopeMeasurementsGenerator?) {
            staticIntervalDetectedListener?.onStaticIntervalDetected(
                this@GyroscopeMeasurementGenerator
            )
        }

        override fun onDynamicIntervalDetected(generator: GyroscopeMeasurementsGenerator?) {
            dynamicIntervalDetectedListener?.onDynamicIntervalDetected(
                this@GyroscopeMeasurementGenerator
            )
        }

        override fun onStaticIntervalSkipped(generator: GyroscopeMeasurementsGenerator?) {
            staticIntervalSkippedListener?.onStaticIntervalSkipped(
                this@GyroscopeMeasurementGenerator
            )
        }

        override fun onDynamicIntervalSkipped(generator: GyroscopeMeasurementsGenerator?) {
            dynamicIntervalSkippedListener?.onDynamicIntervalSkipped(
                this@GyroscopeMeasurementGenerator
            )
        }

        override fun onGeneratedMeasurement(
            generator: GyroscopeMeasurementsGenerator?,
            measurement: BodyKinematicsSequence<StandardDeviationTimedBodyKinematics>
        ) {
            generatedMeasurementListener?.onGeneratedMeasurement(
                this@GyroscopeMeasurementGenerator,
                measurement
            )
        }

        override fun onReset(generator: GyroscopeMeasurementsGenerator?) {
            resetListener?.onReset(this@GyroscopeMeasurementGenerator)
        }
    }

    /**
     * Internal measurements generator for gyroscope calibration.
     */
    override val measurementsGenerator =
        GyroscopeMeasurementsGenerator(measurementsGeneratorListener)

    /**
     * Processes an accelerometer measurement to generate an instance of type [TimedBodyKinematics]
     * to be used by the internal measurement generator.
     *
     * @param ax acceleration on device x-axis expressed in meters per squared second (m/s^2).
     * @param ay acceleration on device y-axis expressed in meters per squared second (m/s^2).
     * @param az acceleration on device z-axis expressed in meters per squared second (m/s^2).
     * @param bx bias on device x-axis expressed in meters per squared second (m/s^2). Only
     * available when using [AccelerometerSensorCollector.SensorType.ACCELEROMETER_UNCALIBRATED].
     * If available, this value remains constant with calibrated bias value.
     * @param by bias on device y-axis expressed in meters per squared second (m/s^2). Only
     * available when using [AccelerometerSensorCollector.SensorType.ACCELEROMETER_UNCALIBRATED].
     * If available, this value remains constant with calibrated bias value.
     * @param bz bias on device z-axis expressed in meters per squared second (m/s^2). Only
     * available when using [AccelerometerSensorCollector.SensorType.ACCELEROMETER_UNCALIBRATED].
     * If available, this value remains constant with calibrated bias value.
     * @param accelerometerTimestamp time in nanoseconds at which the measurement was made. Each
     * measurement will be monotonically increasing using the same time base as
     * [android.os.SystemClock.elapsedRealtimeNanos].
     * @param accelerometerTimestamp accelerometer sensor accuracy.
     * @param diffSeconds elapsed seconds since accelerometer started.
     * @param result instance where processed sample result will be stored.
     */
    override fun processSample(
        ax: Float,
        ay: Float,
        az: Float,
        bx: Float?,
        by: Float?,
        bz: Float?,
        accelerometerTimestamp: Long,
        accelerometerAccuracy: SensorAccuracy?,
        diffSeconds: Double,
        result: TimedBodyKinematics
    ) {
        // set accelerometer information (gyroscope information is filled on the corresponding
        // gyroscope listener)
        kinematics.fx = ax.toDouble()
        kinematics.fy = ay.toDouble()
        kinematics.fz = az.toDouble()
        result.kinematics = kinematics
        result.timestampSeconds = diffSeconds
    }

    /**
     * Body kinematics being reused for efficiency purposes.
     */
    private val kinematics = BodyKinematics()

    /**
     * Sample used by internal measurement generator.
     */
    override val sample = TimedBodyKinematics()

    /**
     * Internal listener for gyroscope sensor collector.
     * Handles measurements collected by the gyroscope sensor so that they are processed
     * by the internal measurement generator.
     */
    private val gyroscopeCollectorMeasurementListener =
        GyroscopeSensorCollector.OnMeasurementListener { wx, wy, wz, bx, by, bz, timestamp, accuracy ->
            // set gyroscope information
            kinematics.angularRateX = wx.toDouble()
            kinematics.angularRateY = wy.toDouble()
            kinematics.angularRateZ = wz.toDouble()

            gyroscopeMeasurementListener?.onMeasurement(wx, wy, wz, bx, by, bz, timestamp, accuracy)
        }

    /**
     * Gyroscope sensor collector.
     * Collects gyroscope measurements.
     */
    private val gyroscopeCollector = GyroscopeSensorCollector(
        context,
        gyroscopeSensorType,
        gyroscopeSensorDelay,
        gyroscopeCollectorMeasurementListener,
        collectorAccuracyChangedListener
    )

    /**
     * Gets gyroscope sensor being used to obtain measurements, or null if not available.
     * This can be used to obtain additional information about the sensor.
     */
    val gyroscopeSensor
        get() = gyroscopeCollector.sensor

    /**
     * Starts collection of sensor measurements.
     *
     * @throws IllegalStateException if detector is already running or sensor is not available.
     */
    @Throws(IllegalStateException::class)
    override fun start() {
        super.start()
        if (!gyroscopeCollector.start()) {
            stop()
            throw java.lang.IllegalStateException("Unavailable gyroscope sensor")
        }
    }

    /**
     * Stops collection of sensor measurements.
     */
    override fun stop() {
        gyroscopeCollector.stop()
        super.stop()
    }
}