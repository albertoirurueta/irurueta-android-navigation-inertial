/*
 * Copyright (C) 2022 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.android.navigation.inertial.calibration.intervals.measurements

import android.content.Context
import com.irurueta.android.navigation.inertial.collectors.*
import com.irurueta.navigation.inertial.BodyKinematics
import com.irurueta.navigation.inertial.BodyKinematicsAndMagneticFluxDensity
import com.irurueta.navigation.inertial.BodyMagneticFluxDensity
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyMagneticFluxDensity
import com.irurueta.navigation.inertial.calibration.generators.MagnetometerMeasurementsGenerator
import com.irurueta.navigation.inertial.calibration.generators.MagnetometerMeasurementsGeneratorListener
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector

/**
 * Generates measurements that can later be used by magnetometer calibrators.
 * Measurements are generated by taking into account static and dynamic intervals on the device,
 * when the device is kept static (e.g. motionless), or when same force is applied to the device
 * changing its position or orientation.
 */
class MagnetometerMeasurementGenerator(
    context: Context,
    accelerometerSensorType: AccelerometerSensorCollector.SensorType = AccelerometerSensorCollector.SensorType.ACCELEROMETER,
    accelerometerSensorDelay: SensorDelay = SensorDelay.FASTEST,
    val magnetometerSensorType: MagnetometerSensorCollector.SensorType =
        MagnetometerSensorCollector.SensorType.MAGNETOMETER,
    val magnetometerSensorDelay: SensorDelay = SensorDelay.FASTEST,
    initializationStartedListener: OnInitializationStartedListener<MagnetometerMeasurementGenerator>? = null,
    initializationCompletedListener: OnInitializationCompletedListener<MagnetometerMeasurementGenerator>? = null,
    errorListener: OnErrorListener<MagnetometerMeasurementGenerator>? = null,
    staticIntervalDetectedListener: OnStaticIntervalDetectedListener<MagnetometerMeasurementGenerator>? = null,
    dynamicIntervalDetectedListener: OnDynamicIntervalDetectedListener<MagnetometerMeasurementGenerator>? = null,
    staticIntervalSkippedListener: OnStaticIntervalSkippedListener<MagnetometerMeasurementGenerator>? = null,
    dynamicIntervalSkippedListener: OnDynamicIntervalSkippedListener<MagnetometerMeasurementGenerator>? = null,
    generatedMeasurementListener: OnGeneratedMeasurementListener<MagnetometerMeasurementGenerator, StandardDeviationBodyMagneticFluxDensity>? = null,
    resetListener: OnResetListener<MagnetometerMeasurementGenerator>? = null,
    accelerometerMeasurementListener: AccelerometerSensorCollector.OnMeasurementListener? = null,
    var magnetometerMeasurementListener: MagnetometerSensorCollector.OnMeasurementListener? = null,
    accuracyChangedListener: SensorCollector.OnAccuracyChangedListener? = null
) : SingleSensorCalibrationMeasurementGenerator<MagnetometerMeasurementGenerator,
        StandardDeviationBodyMagneticFluxDensity, MagnetometerMeasurementsGenerator,
        MagnetometerMeasurementsGeneratorListener, BodyKinematicsAndMagneticFluxDensity>(
    context,
    accelerometerSensorType,
    accelerometerSensorDelay,
    initializationStartedListener,
    initializationCompletedListener,
    errorListener,
    staticIntervalDetectedListener,
    dynamicIntervalDetectedListener,
    staticIntervalSkippedListener,
    dynamicIntervalSkippedListener,
    generatedMeasurementListener,
    resetListener,
    accelerometerMeasurementListener,
    accuracyChangedListener
) {
    /**
     * Listener for internal measurement generator.
     */
    override val measurementsGeneratorListener =
        object : MagnetometerMeasurementsGeneratorListener {
            override fun onInitializationStarted(generator: MagnetometerMeasurementsGenerator?) {
                initializationStartedListener?.onInitializationStarted(
                    this@MagnetometerMeasurementGenerator
                )
            }

            override fun onInitializationCompleted(
                generator: MagnetometerMeasurementsGenerator?,
                baseNoiseLevel: Double
            ) {
                initializationCompletedListener?.onInitializationCompleted(
                    this@MagnetometerMeasurementGenerator,
                    baseNoiseLevel
                )
            }

            override fun onError(
                generator: MagnetometerMeasurementsGenerator?,
                reason: TriadStaticIntervalDetector.ErrorReason
            ) {
                errorListener?.onError(
                    this@MagnetometerMeasurementGenerator,
                    mapErrorReason(reason)
                )
            }

            override fun onStaticIntervalDetected(generator: MagnetometerMeasurementsGenerator?) {
                staticIntervalDetectedListener?.onStaticIntervalDetected(
                    this@MagnetometerMeasurementGenerator
                )
            }

            override fun onDynamicIntervalDetected(generator: MagnetometerMeasurementsGenerator?) {
                dynamicIntervalDetectedListener?.onDynamicIntervalDetected(
                    this@MagnetometerMeasurementGenerator
                )
            }

            override fun onStaticIntervalSkipped(generator: MagnetometerMeasurementsGenerator?) {
                staticIntervalSkippedListener?.onStaticIntervalSkipped(
                    this@MagnetometerMeasurementGenerator
                )
            }

            override fun onDynamicIntervalSkipped(generator: MagnetometerMeasurementsGenerator?) {
                dynamicIntervalSkippedListener?.onDynamicIntervalSkipped(
                    this@MagnetometerMeasurementGenerator
                )
            }

            override fun onGeneratedMeasurement(
                generator: MagnetometerMeasurementsGenerator?,
                measurement: StandardDeviationBodyMagneticFluxDensity
            ) {
                generatedMeasurementListener?.onGeneratedMeasurement(
                    this@MagnetometerMeasurementGenerator,
                    measurement
                )
            }

            override fun onReset(generator: MagnetometerMeasurementsGenerator?) {
                resetListener?.onReset(this@MagnetometerMeasurementGenerator)
            }
        }

    /**
     * Internal measurements generator for magnetometer calibration.
     */
    override val measurementsGenerator =
        MagnetometerMeasurementsGenerator(measurementsGeneratorListener)

    /**
     * Processes an accelerometer measurement to generate an instance of type [BodyKinematics] to be
     * used by the internal measurement generator.
     * Since [MagnetometerMeasurementsGenerator] only requires acceleration information, no data is
     * provided for angular rates in processed result.
     *
     * @param ax acceleration on device x-axis expressed in meters per squared second (m/s^2).
     * @param ay acceleration on device y-axis expressed in meters per squared second (m/s^2).
     * @param az acceleration on device z-axis expressed in meters per squared second (m/s^2).
     * @param diffSeconds elapsed seconds since accelerometer started.
     * @param result instance where processed sample result will be stored.
     */
    override fun processSample(
        ax: Float,
        ay: Float,
        az: Float,
        diffSeconds: Double,
        result: BodyKinematicsAndMagneticFluxDensity
    ) {
        // set accelerometer information
        kinematics.fx = ax.toDouble()
        kinematics.fy = ay.toDouble()
        kinematics.fz = az.toDouble()
        result.kinematics = kinematics

        // set magnetometer information
        result.magneticFluxDensity = magneticFluxDensity
    }

    /**
     * Body kinematics being reused for efficiency purposes.
     * For magnetometer calibration purposes, only specific force is required.
     */
    private val kinematics = BodyKinematics()

    /**
     * Body magnetic flux density being reused for efficiency purposes.
     */
    private val magneticFluxDensity = BodyMagneticFluxDensity()

    /**
     * Sample used by internal measurement generator.
     */
    override val sample = BodyKinematicsAndMagneticFluxDensity()

    /**
     * Internal listener for magnetometer sensor collector.
     * Handles measurements collected by the magnetometer sensor so that they are processed
     * by the internal measurement generator.
     */
    private val magnetometerCollectorMeasurementListener =
        MagnetometerSensorCollector.OnMeasurementListener { bx, by, bz, hardIronX, hardIronY, hardIronZ, timestamp, accuracy ->
            magneticFluxDensity.bx = bx.toDouble()
            magneticFluxDensity.by = by.toDouble()
            magneticFluxDensity.bz = bz.toDouble()

            magnetometerMeasurementListener?.onMeasurement(
                bx,
                by,
                bz,
                hardIronX,
                hardIronY,
                hardIronZ,
                timestamp,
                accuracy
            )
        }

    /**
     * Magnetometer sensor collector.
     * Collects magnetometer measurements.
     */
    private val magnetometerCollector = MagnetometerSensorCollector(
        context,
        magnetometerSensorType,
        magnetometerSensorDelay,
        magnetometerCollectorMeasurementListener,
        collectorAccuracyChangedListener
    )

    /**
     * Gets magnetometer sensor being used to obtain measurements, or null if not available.
     * This can be used to obtain additional information about the sensor.
     */
    val magnetometerSensor
        get() = magnetometerCollector.sensor

    /**
     * Starts collection of sensor measurements.
     *
     * @throws IllegalStateException if detector is already running or sensor is not available.
     */
    @Throws(IllegalStateException::class)
    override fun start() {
        super.start()
        if (!magnetometerCollector.start()) {
            stop()
            throw IllegalStateException("Unavailable magnetometer sensor")
        }
    }

    /**
     * Stops collection of sensor measurements.
     */
    override fun stop() {
        magnetometerCollector.stop()
        super.stop()
    }
}